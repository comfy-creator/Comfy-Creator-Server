# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from comfy_request import v1_pb2 as comfy__request_dot_v1__pb2
from google import empty_pb2 as google_dot_empty__pb2


class ComfyStub(object):
    """====== Service Definition ======

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RunWorkflow = channel.unary_unary(
                '/comfy_request.v1.Comfy/RunWorkflow',
                request_serializer=comfy__request_dot_v1__pb2.ComfyRequest.SerializeToString,
                response_deserializer=comfy__request_dot_v1__pb2.JobCreated.FromString,
                )
        self.RunWorkflowSync = channel.unary_unary(
                '/comfy_request.v1.Comfy/RunWorkflowSync',
                request_serializer=comfy__request_dot_v1__pb2.ComfyRequest.SerializeToString,
                response_deserializer=comfy__request_dot_v1__pb2.JobOutput.FromString,
                )
        self.StreamSession = channel.unary_stream(
                '/comfy_request.v1.Comfy/StreamSession',
                request_serializer=comfy__request_dot_v1__pb2.StreamSessionRequest.SerializeToString,
                response_deserializer=comfy__request_dot_v1__pb2.ComfyMessage.FromString,
                )
        self.StreamJob = channel.unary_stream(
                '/comfy_request.v1.Comfy/StreamJob',
                request_serializer=comfy__request_dot_v1__pb2.StreamJobRequest.SerializeToString,
                response_deserializer=comfy__request_dot_v1__pb2.ComfyMessage.FromString,
                )
        self.CancelJob = channel.unary_unary(
                '/comfy_request.v1.Comfy/CancelJob',
                request_serializer=comfy__request_dot_v1__pb2.JobId.SerializeToString,
                response_deserializer=google_dot_empty__pb2.Empty.FromString,
                )
        self.PurgeSessionQueue = channel.unary_unary(
                '/comfy_request.v1.Comfy/PurgeSessionQueue',
                request_serializer=comfy__request_dot_v1__pb2.SessionId.SerializeToString,
                response_deserializer=google_dot_empty__pb2.Empty.FromString,
                )
        self.GetSessionHistory = channel.unary_unary(
                '/comfy_request.v1.Comfy/GetSessionHistory',
                request_serializer=comfy__request_dot_v1__pb2.SessionId.SerializeToString,
                response_deserializer=comfy__request_dot_v1__pb2.SessionHistory.FromString,
                )
        self.ClearSessionHistory = channel.unary_unary(
                '/comfy_request.v1.Comfy/ClearSessionHistory',
                request_serializer=comfy__request_dot_v1__pb2.SessionId.SerializeToString,
                response_deserializer=google_dot_empty__pb2.Empty.FromString,
                )
        self.GetNodeDefinitions = channel.unary_unary(
                '/comfy_request.v1.Comfy/GetNodeDefinitions',
                request_serializer=comfy__request_dot_v1__pb2.NodeDefRequest.SerializeToString,
                response_deserializer=comfy__request_dot_v1__pb2.NodeDefs.FromString,
                )
        self.GetModelCatalog = channel.unary_unary(
                '/comfy_request.v1.Comfy/GetModelCatalog',
                request_serializer=comfy__request_dot_v1__pb2.ModelCatalogRequest.SerializeToString,
                response_deserializer=comfy__request_dot_v1__pb2.ModelCatalog.FromString,
                )


class ComfyServicer(object):
    """====== Service Definition ======

    """

    def RunWorkflow(self, request, context):
        """Queue a workflow and receive the job id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RunWorkflowSync(self, request, context):
        """Queue a workflow and wait for the final outputs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamSession(self, request, context):
        """Bidirectional stream of requests and final outputs
        TO DO: implement in the future?
        rpc StreamWorkflow(stream ComfyRequest) returns (stream ComfyMessage) {};

        Server-side stream of all jobs in a given session-id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamJob(self, request, context):
        """Server-side stream of a specific job-id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelJob(self, request, context):
        """Cancels a specific job (regardless if it's running or queued)
        This is a combination of 'delete' and 'interrupt' from ComfyUI.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PurgeSessionQueue(self, request, context):
        """Cancels all queued (pending) jobs in a given session-id
        ComfyUI calls this 'clear'
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSessionHistory(self, request, context):
        """Returns a list of outputs from a given session-id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ClearSessionHistory(self, request, context):
        """Removes the JobOutputs from memory for a given session-id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeDefinitions(self, request, context):
        """Gets the definitions of all nodes supported by this server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetModelCatalog(self, request, context):
        """Get models, grouped by architecture
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ComfyServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RunWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.RunWorkflow,
                    request_deserializer=comfy__request_dot_v1__pb2.ComfyRequest.FromString,
                    response_serializer=comfy__request_dot_v1__pb2.JobCreated.SerializeToString,
            ),
            'RunWorkflowSync': grpc.unary_unary_rpc_method_handler(
                    servicer.RunWorkflowSync,
                    request_deserializer=comfy__request_dot_v1__pb2.ComfyRequest.FromString,
                    response_serializer=comfy__request_dot_v1__pb2.JobOutput.SerializeToString,
            ),
            'StreamSession': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamSession,
                    request_deserializer=comfy__request_dot_v1__pb2.StreamSessionRequest.FromString,
                    response_serializer=comfy__request_dot_v1__pb2.ComfyMessage.SerializeToString,
            ),
            'StreamJob': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamJob,
                    request_deserializer=comfy__request_dot_v1__pb2.StreamJobRequest.FromString,
                    response_serializer=comfy__request_dot_v1__pb2.ComfyMessage.SerializeToString,
            ),
            'CancelJob': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelJob,
                    request_deserializer=comfy__request_dot_v1__pb2.JobId.FromString,
                    response_serializer=google_dot_empty__pb2.Empty.SerializeToString,
            ),
            'PurgeSessionQueue': grpc.unary_unary_rpc_method_handler(
                    servicer.PurgeSessionQueue,
                    request_deserializer=comfy__request_dot_v1__pb2.SessionId.FromString,
                    response_serializer=google_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetSessionHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSessionHistory,
                    request_deserializer=comfy__request_dot_v1__pb2.SessionId.FromString,
                    response_serializer=comfy__request_dot_v1__pb2.SessionHistory.SerializeToString,
            ),
            'ClearSessionHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.ClearSessionHistory,
                    request_deserializer=comfy__request_dot_v1__pb2.SessionId.FromString,
                    response_serializer=google_dot_empty__pb2.Empty.SerializeToString,
            ),
            'GetNodeDefinitions': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeDefinitions,
                    request_deserializer=comfy__request_dot_v1__pb2.NodeDefRequest.FromString,
                    response_serializer=comfy__request_dot_v1__pb2.NodeDefs.SerializeToString,
            ),
            'GetModelCatalog': grpc.unary_unary_rpc_method_handler(
                    servicer.GetModelCatalog,
                    request_deserializer=comfy__request_dot_v1__pb2.ModelCatalogRequest.FromString,
                    response_serializer=comfy__request_dot_v1__pb2.ModelCatalog.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'comfy_request.v1.Comfy', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Comfy(object):
    """====== Service Definition ======

    """

    @staticmethod
    def RunWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comfy_request.v1.Comfy/RunWorkflow',
            comfy__request_dot_v1__pb2.ComfyRequest.SerializeToString,
            comfy__request_dot_v1__pb2.JobCreated.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RunWorkflowSync(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comfy_request.v1.Comfy/RunWorkflowSync',
            comfy__request_dot_v1__pb2.ComfyRequest.SerializeToString,
            comfy__request_dot_v1__pb2.JobOutput.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/comfy_request.v1.Comfy/StreamSession',
            comfy__request_dot_v1__pb2.StreamSessionRequest.SerializeToString,
            comfy__request_dot_v1__pb2.ComfyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StreamJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/comfy_request.v1.Comfy/StreamJob',
            comfy__request_dot_v1__pb2.StreamJobRequest.SerializeToString,
            comfy__request_dot_v1__pb2.ComfyMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CancelJob(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comfy_request.v1.Comfy/CancelJob',
            comfy__request_dot_v1__pb2.JobId.SerializeToString,
            google_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PurgeSessionQueue(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comfy_request.v1.Comfy/PurgeSessionQueue',
            comfy__request_dot_v1__pb2.SessionId.SerializeToString,
            google_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSessionHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comfy_request.v1.Comfy/GetSessionHistory',
            comfy__request_dot_v1__pb2.SessionId.SerializeToString,
            comfy__request_dot_v1__pb2.SessionHistory.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ClearSessionHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comfy_request.v1.Comfy/ClearSessionHistory',
            comfy__request_dot_v1__pb2.SessionId.SerializeToString,
            google_dot_empty__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodeDefinitions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comfy_request.v1.Comfy/GetNodeDefinitions',
            comfy__request_dot_v1__pb2.NodeDefRequest.SerializeToString,
            comfy__request_dot_v1__pb2.NodeDefs.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetModelCatalog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/comfy_request.v1.Comfy/GetModelCatalog',
            comfy__request_dot_v1__pb2.ModelCatalogRequest.SerializeToString,
            comfy__request_dot_v1__pb2.ModelCatalog.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
