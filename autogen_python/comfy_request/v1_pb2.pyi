"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
These are more direct client-created workflows for client -> server -> worker"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import google.protobuf.struct_pb2
import serialized_graph.v1_pb2
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _JobStatus:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _JobStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_JobStatus.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    QUEUED: _JobStatus.ValueType  # 0
    EXECUTING: _JobStatus.ValueType  # 1
    COMPLETED: _JobStatus.ValueType  # 2
    ERROR: _JobStatus.ValueType  # 3
    ABORTED: _JobStatus.ValueType  # 4

class JobStatus(_JobStatus, metaclass=_JobStatusEnumTypeWrapper): ...

QUEUED: JobStatus.ValueType  # 0
EXECUTING: JobStatus.ValueType  # 1
COMPLETED: JobStatus.ValueType  # 2
ERROR: JobStatus.ValueType  # 3
ABORTED: JobStatus.ValueType  # 4
global___JobStatus = JobStatus

@typing_extensions.final
class WorkflowStep(google.protobuf.message.Message):
    """======= General Types ========

    Message definition for WorkflowStep
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CLASS_TYPE_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    class_type: builtins.str
    @property
    def inputs(self) -> google.protobuf.struct_pb2.Struct:
        """Inputs are too idiosyncratic to be typed specifically"""
    def __init__(
        self,
        *,
        class_type: builtins.str = ...,
        inputs: google.protobuf.struct_pb2.Struct | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["inputs", b"inputs"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["class_type", b"class_type", "inputs", b"inputs"]) -> None: ...

global___WorkflowStep = WorkflowStep

@typing_extensions.final
class FileReference(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    URL_FIELD_NUMBER: builtins.int
    IS_TEMP_FIELD_NUMBER: builtins.int
    url: builtins.str
    """string must be a valid url"""
    is_temp: builtins.bool
    """Comfy UI terminology: key 'type', values 'temp' | 'output'
    if true, file is in a temporary S3 bucket
    """
    def __init__(
        self,
        *,
        url: builtins.str = ...,
        is_temp: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["is_temp", b"is_temp", "url", b"url"]) -> None: ...

global___FileReference = FileReference

@typing_extensions.final
class WorkflowFile(google.protobuf.message.Message):
    """TO DO: add conditional check for url conformity
    Two files with the same hash are treated as equivalent; we use file-hashes as filenames.
    File types returned:
    image: png, jpg, svg, webp, gif
    video: mp4
    data: json (icluding RLE-encoded masks), npy (numpy array for embeddings)
    TO DO: in the future, we may want more metadata, such as mask VS image VS latent preview
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BLAKE3_HASH_FIELD_NUMBER: builtins.int
    MIME_TYPE_FIELD_NUMBER: builtins.int
    REFERENCE_FIELD_NUMBER: builtins.int
    BYTES_FIELD_NUMBER: builtins.int
    blake3_hash: builtins.str
    """unique identifier for the file; use this instead of a filename"""
    mime_type: builtins.str
    """ComfyUI terminology: key 'format'
    example: "video/h264-mp4", "image/png"
    """
    @property
    def reference(self) -> global___FileReference: ...
    bytes: builtins.bytes
    def __init__(
        self,
        *,
        blake3_hash: builtins.str = ...,
        mime_type: builtins.str = ...,
        reference: global___FileReference | None = ...,
        bytes: builtins.bytes = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bytes", b"bytes", "data", b"data", "reference", b"reference"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["blake3_hash", b"blake3_hash", "bytes", b"bytes", "data", b"data", "mime_type", b"mime_type", "reference", b"reference"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data", b"data"]) -> typing_extensions.Literal["reference", "bytes"] | None: ...

global___WorkflowFile = WorkflowFile

@typing_extensions.final
class LocalFile(google.protobuf.message.Message):
    """It would be helpful to have blake3 hashes rather than filenames"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NAME_FIELD_NUMBER: builtins.int
    PATH_FIELD_NUMBER: builtins.int
    SIZE_FIELD_NUMBER: builtins.int
    MIME_TYPE_FIELD_NUMBER: builtins.int
    name: builtins.str
    path: builtins.str
    size: builtins.int
    """in bytes"""
    mime_type: builtins.str
    def __init__(
        self,
        *,
        name: builtins.str = ...,
        path: builtins.str = ...,
        size: builtins.int = ...,
        mime_type: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["mime_type", b"mime_type", "name", b"name", "path", b"path", "size", b"size"]) -> None: ...

global___LocalFile = LocalFile

@typing_extensions.final
class LocalFiles(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADDED_FIELD_NUMBER: builtins.int
    UPDATED_FIELD_NUMBER: builtins.int
    REMOVED_FIELD_NUMBER: builtins.int
    @property
    def added(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LocalFile]: ...
    @property
    def updated(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LocalFile]: ...
    @property
    def removed(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___LocalFile]: ...
    def __init__(
        self,
        *,
        added: collections.abc.Iterable[global___LocalFile] | None = ...,
        updated: collections.abc.Iterable[global___LocalFile] | None = ...,
        removed: collections.abc.Iterable[global___LocalFile] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["added", b"added", "removed", b"removed", "updated", b"updated"]) -> None: ...

global___LocalFiles = LocalFiles

@typing_extensions.final
class JobId(google.protobuf.message.Message):
    """message UserId {
      string user_id = 1;
    }
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    JOB_ID_FIELD_NUMBER: builtins.int
    job_id: builtins.str
    def __init__(
        self,
        *,
        job_id: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["job_id", b"job_id"]) -> None: ...

global___JobId = JobId

@typing_extensions.final
class OutputConfig(google.protobuf.message.Message):
    """If this job-id already exists, this new update will overwrite it.
    Open-ended jobs will not be closed upon completion of their workflow. This allows for
    clients to create recurring jobs, such as an auto-queue workflow that converts hand-drawn
    images to new images every second.

    TO DO: consider implementing this
    enum ResponseFormat {
      URL = 0;
      BINARY = 1;
    }
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WRITE_TO_GRAPH_ID_FIELD_NUMBER: builtins.int
    WEBHOOK_URL_FIELD_NUMBER: builtins.int
    write_to_graph_id: builtins.str
    """writes outputs to the specified collaborative graph"""
    webhook_url: builtins.str
    """Results will be persisted in a pulsar topic for querying later
    Defaults to true in the case of `Run`, and false in the case of `RunSync`
    optional bool persist_job_record = 2;

    Performs a callback to the webhook url with the outputs
    """
    def __init__(
        self,
        *,
        write_to_graph_id: builtins.str | None = ...,
        webhook_url: builtins.str | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_webhook_url", b"_webhook_url", "_write_to_graph_id", b"_write_to_graph_id", "webhook_url", b"webhook_url", "write_to_graph_id", b"write_to_graph_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_webhook_url", b"_webhook_url", "_write_to_graph_id", b"_write_to_graph_id", "webhook_url", b"webhook_url", "write_to_graph_id", b"write_to_graph_id"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_webhook_url", b"_webhook_url"]) -> typing_extensions.Literal["webhook_url"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_write_to_graph_id", b"_write_to_graph_id"]) -> typing_extensions.Literal["write_to_graph_id"] | None: ...

global___OutputConfig = OutputConfig

@typing_extensions.final
class ComfyRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class WorkflowEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___WorkflowStep: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___WorkflowStep | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    REQUEST_ID_FIELD_NUMBER: builtins.int
    WORKFLOW_FIELD_NUMBER: builtins.int
    SERIALIZED_GRAPH_FIELD_NUMBER: builtins.int
    OUTPUT_CONFIG_FIELD_NUMBER: builtins.int
    request_id: builtins.str
    """This is a client-supplied identifier; it allows the client to associate responses
    or multiple requests with the same identifier. Useful for webhook callbacks.
    """
    @property
    def workflow(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___WorkflowStep]:
        """keys are node_ids"""
    @property
    def serialized_graph(self) -> serialized_graph.v1_pb2.SerializedGraph: ...
    @property
    def output_config(self) -> global___OutputConfig: ...
    def __init__(
        self,
        *,
        request_id: builtins.str | None = ...,
        workflow: collections.abc.Mapping[builtins.str, global___WorkflowStep] | None = ...,
        serialized_graph: serialized_graph.v1_pb2.SerializedGraph | None = ...,
        output_config: global___OutputConfig | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_output_config", b"_output_config", "_request_id", b"_request_id", "_serialized_graph", b"_serialized_graph", "output_config", b"output_config", "request_id", b"request_id", "serialized_graph", b"serialized_graph"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_output_config", b"_output_config", "_request_id", b"_request_id", "_serialized_graph", b"_serialized_graph", "output_config", b"output_config", "request_id", b"request_id", "serialized_graph", b"serialized_graph", "workflow", b"workflow"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_output_config", b"_output_config"]) -> typing_extensions.Literal["output_config"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_request_id", b"_request_id"]) -> typing_extensions.Literal["request_id"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_serialized_graph", b"_serialized_graph"]) -> typing_extensions.Literal["serialized_graph"] | None: ...

global___ComfyRequest = ComfyRequest

@typing_extensions.final
class JobSnapshot(google.protobuf.message.Message):
    """A list of job outputs from a user
    message UserHistory {
      repeated JobOutput outputs = 1;
    }

    This is published to pulsar as a cumulative message; it contains all prior msg info
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Metrics(google.protobuf.message.Message):
        """Metrics are cumulative for the entire job"""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        QUEUE_SECONDS_FIELD_NUMBER: builtins.int
        EXECUTION_SECONDS_FIELD_NUMBER: builtins.int
        queue_seconds: builtins.int
        execution_seconds: builtins.int
        def __init__(
            self,
            *,
            queue_seconds: builtins.int = ...,
            execution_seconds: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["execution_seconds", b"execution_seconds", "queue_seconds", b"queue_seconds"]) -> None: ...

    JOB_ID_FIELD_NUMBER: builtins.int
    REQUEST_ID_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    METRICS_FIELD_NUMBER: builtins.int
    job_id: builtins.str
    request_id: builtins.str
    status: global___JobStatus.ValueType
    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___JobOutput]: ...
    @property
    def metrics(self) -> global___JobSnapshot.Metrics: ...
    def __init__(
        self,
        *,
        job_id: builtins.str = ...,
        request_id: builtins.str | None = ...,
        status: global___JobStatus.ValueType = ...,
        outputs: collections.abc.Iterable[global___JobOutput] | None = ...,
        metrics: global___JobSnapshot.Metrics | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["_metrics", b"_metrics", "_request_id", b"_request_id", "metrics", b"metrics", "request_id", b"request_id"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["_metrics", b"_metrics", "_request_id", b"_request_id", "job_id", b"job_id", "metrics", b"metrics", "outputs", b"outputs", "request_id", b"request_id", "status", b"status"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_metrics", b"_metrics"]) -> typing_extensions.Literal["metrics"] | None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["_request_id", b"_request_id"]) -> typing_extensions.Literal["request_id"] | None: ...

global___JobSnapshot = JobSnapshot

@typing_extensions.final
class JobOutput(google.protobuf.message.Message):
    """======= Stream Response Types ========"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    NODE_ID_FIELD_NUMBER: builtins.int
    CLASS_TYPE_FIELD_NUMBER: builtins.int
    FILE_FIELD_NUMBER: builtins.int
    node_id: builtins.str
    """id of the node in the original workflow that produced this output"""
    class_type: builtins.str
    """output node's class type"""
    @property
    def file(self) -> global___WorkflowFile: ...
    def __init__(
        self,
        *,
        node_id: builtins.str = ...,
        class_type: builtins.str = ...,
        file: global___WorkflowFile | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["file", b"file"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["class_type", b"class_type", "file", b"file", "node_id", b"node_id"]) -> None: ...

global___JobOutput = JobOutput

@typing_extensions.final
class NodeDefRequest(google.protobuf.message.Message):
    """====== Node Definition Messages ======

    Specify subset of fully qualified extension names, to load their node defs
    Leave empty to retrieve all node definitions
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    EXTENSION_IDS_FIELD_NUMBER: builtins.int
    @property
    def extension_ids(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        extension_ids: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["extension_ids", b"extension_ids"]) -> None: ...

global___NodeDefRequest = NodeDefRequest

@typing_extensions.final
class NodeDefinition(google.protobuf.message.Message):
    """Input specs are used for to populate input-widgets. Example:
    number: min / max / step values for a number
    string: multiline: true / false
    or 'default' for any value really
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class InputDef(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        LABEL_FIELD_NUMBER: builtins.int
        EDGE_TYPE_FIELD_NUMBER: builtins.int
        SPEC_FIELD_NUMBER: builtins.int
        label: builtins.str
        edge_type: builtins.str
        @property
        def spec(self) -> google.protobuf.struct_pb2.Struct: ...
        def __init__(
            self,
            *,
            label: builtins.str = ...,
            edge_type: builtins.str = ...,
            spec: google.protobuf.struct_pb2.Struct | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["spec", b"spec"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["edge_type", b"edge_type", "label", b"label", "spec", b"spec"]) -> None: ...

    @typing_extensions.final
    class OutputDef(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        LABEL_FIELD_NUMBER: builtins.int
        EDGE_TYPE_FIELD_NUMBER: builtins.int
        label: builtins.str
        edge_type: builtins.str
        def __init__(
            self,
            *,
            label: builtins.str = ...,
            edge_type: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["edge_type", b"edge_type", "label", b"label"]) -> None: ...

    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    OUTPUT_NODE_FIELD_NUMBER: builtins.int
    display_name: builtins.str
    description: builtins.str
    category: builtins.str
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NodeDefinition.InputDef]: ...
    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___NodeDefinition.OutputDef]: ...
    output_node: builtins.bool
    def __init__(
        self,
        *,
        display_name: builtins.str = ...,
        description: builtins.str = ...,
        category: builtins.str = ...,
        inputs: collections.abc.Iterable[global___NodeDefinition.InputDef] | None = ...,
        outputs: collections.abc.Iterable[global___NodeDefinition.OutputDef] | None = ...,
        output_node: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["category", b"category", "description", b"description", "display_name", b"display_name", "inputs", b"inputs", "output_node", b"output_node", "outputs", b"outputs"]) -> None: ...

global___NodeDefinition = NodeDefinition

@typing_extensions.final
class NodeDefs(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class DefsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___NodeDefinition: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___NodeDefinition | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    DEFS_FIELD_NUMBER: builtins.int
    @property
    def defs(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___NodeDefinition]: ...
    def __init__(
        self,
        *,
        defs: collections.abc.Mapping[builtins.str, global___NodeDefinition] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["defs", b"defs"]) -> None: ...

global___NodeDefs = NodeDefs

@typing_extensions.final
class Models(google.protobuf.message.Message):
    """====== Model Info Messages ======"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class Info(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        BLAKE3_HASH_FIELD_NUMBER: builtins.int
        DISPLAY_NAME_FIELD_NUMBER: builtins.int
        blake3_hash: builtins.str
        display_name: builtins.str
        def __init__(
            self,
            *,
            blake3_hash: builtins.str = ...,
            display_name: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["blake3_hash", b"blake3_hash", "display_name", b"display_name"]) -> None: ...

    INFO_FIELD_NUMBER: builtins.int
    @property
    def info(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Models.Info]: ...
    def __init__(
        self,
        *,
        info: collections.abc.Iterable[global___Models.Info] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["info", b"info"]) -> None: ...

global___Models = Models

@typing_extensions.final
class ModelCatalog(google.protobuf.message.Message):
    """Maps base-family to model"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ModelsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> global___Models: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: global___Models | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    MODELS_FIELD_NUMBER: builtins.int
    @property
    def models(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, global___Models]: ...
    def __init__(
        self,
        *,
        models: collections.abc.Mapping[builtins.str, global___Models] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["models", b"models"]) -> None: ...

global___ModelCatalog = ModelCatalog

@typing_extensions.final
class ModelCatalogRequest(google.protobuf.message.Message):
    """Leave blank to retrieve all models"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BASE_FAMILY_FIELD_NUMBER: builtins.int
    @property
    def base_family(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]: ...
    def __init__(
        self,
        *,
        base_family: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["base_family", b"base_family"]) -> None: ...

global___ModelCatalogRequest = ModelCatalogRequest
